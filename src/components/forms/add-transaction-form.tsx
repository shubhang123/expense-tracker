
// This is an autogenerated file from Firebase Studio.
'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useRouter } from 'next/navigation';
import { Popover, PopoverTrigger, PopoverContent } from '../ui/popover';
import { CalendarIcon } from 'lucide-react';
import { Calendar } from '../ui/calendar';
import { format } from 'date-fns';
import { cn } from '@/lib/utils';
import { toast } from '@/hooks/use-toast';
import { useEffect } from 'react';

const formSchema = z.object({
  amount: z.coerce.number().positive('Amount must be positive'),
  merchant: z.string().min(2, 'Merchant is too short'),
  category: z.string().min(1, 'Please select a category'),
  subcategory: z.string().optional(),
  date: z.date(),
  notes: z.string().optional(),
  receiptUrl: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),
});

type AddTransactionFormProps = {
  categories: { id: string; name: string }[];
  onSubmit: (data: z.infer<typeof formSchema>) => void;
  defaultCategory?: string | null;
  initialData?: z.infer<typeof formSchema> & { date: string };
  isEditMode?: boolean;
};

export function AddTransactionForm({
  categories,
  onSubmit,
  defaultCategory,
  initialData,
  isEditMode = false,
}: AddTransactionFormProps) {
  const router = useRouter();
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      amount: initialData?.amount || 0,
      merchant: initialData?.merchant || '',
      date: initialData ? new Date(initialData.date) : new Date(),
      category: initialData?.category || defaultCategory || '',
      subcategory: initialData?.subcategory || '',
      notes: initialData?.notes || '',
      receiptUrl: initialData?.receiptUrl || '',
    },
  });

  useEffect(() => {
    if (defaultCategory && !isEditMode) {
      form.setValue('category', defaultCategory);
    }
  }, [defaultCategory, form, isEditMode]);

  function handleFormSubmit(values: z.infer<typeof formSchema>) {
    onSubmit(values);
    if (!isEditMode) {
      toast({ title: 'Transaction Added!', description: 'Your transaction has been successfully saved.'})
      router.push('/');
    }
  }

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(handleFormSubmit)}
        className="space-y-8"
      >
        <FormField
          control={form.control}
          name="amount"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Amount</FormLabel>
              <FormControl>
                <Input
                  type="number"
                  placeholder="0.00"
                  {...field}
                  className="text-4xl h-auto p-4 font-bold"
                  onChange={e => field.onChange(Math.abs(Number(e.target.value)))}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="merchant"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Merchant</FormLabel>
              <FormControl>
                <Input placeholder="e.g. Amazon, Starbucks" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="category"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Category</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a category" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {categories.map(category => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="subcategory"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Subcategory (Optional)</FormLabel>
              <FormControl>
                <Input placeholder="e.g. Coffee, Books" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="date"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Date</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={'outline'}
                      className={cn(
                        'w-full pl-3 text-left font-normal',
                        !field.value && 'text-muted-foreground'
                      )}
                    >
                      {field.value ? (
                        format(field.value, 'PPP')
                      ) : (
                        <span>Pick a date</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={field.onChange}
                    disabled={date =>
                      date > new Date() || date < new Date('1900-01-01')
                    }
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Notes (Optional)</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Add any notes for this transaction"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
            control={form.control}
            name="receiptUrl"
            render={({ field }) => (
                <FormItem>
                <FormLabel>Receipt URL (Optional)</FormLabel>
                <FormControl>
                    <Input placeholder="https://example.com/receipt.png" {...field} />
                </FormControl>
                <FormMessage />
                </FormItem>
            )}
        />
        
        <Button type="submit" className="w-full" size="lg">
          {isEditMode ? 'Save Changes' : 'Add Transaction'}
        </Button>
      </form>
    </Form>
  );
}
