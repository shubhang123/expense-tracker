
// This is an autogenerated file from Firebase Studio.
'use client';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { categories as initialCategories, transactions as initialTransactions } from '@/lib/data';
import { useLocalStorage } from '@/hooks/use-local-storage';
import { useRouter } from 'next/navigation';
import { Button } from '../ui/button';
import Link from 'next/link';
import { ArrowRight } from 'lucide-react';

export function RecentTransactions({ 
  filterByCategory, 
  hideHeader = false, 
  searchTerm,
  transactions: propsTransactions,
  categories: propsCategories,
  showViewAll = false,
}: { 
  filterByCategory?: string, 
  hideHeader?: boolean, 
  searchTerm?: string,
  transactions?: any[],
  categories?: any[],
  showViewAll?: boolean,
}) {
  const [localStorageTransactions] = useLocalStorage('transactions', initialTransactions);
  const [localStorageCategories] = useLocalStorage('categories', initialCategories);
  const router = useRouter();

  const transactions = propsTransactions || localStorageTransactions;
  const categories = propsCategories || localStorageCategories;

  const handleTransactionClick = (id: string) => {
    router.push(`/edit/${id}`);
  };

  const getCategoryName = (id: string) => {
    const category = categories.find(c => c.id.toLowerCase() === id.toLowerCase());
    return category ? category.name : 'N/A';
  }
  
  const hasSearchTerm = searchTerm && searchTerm.trim().length > 0;

  const filteredTransactions = transactions.filter((t: any) => {
    const categoryMatch = !filterByCategory || t.category === filterByCategory;
    
    const trimmedSearch = searchTerm?.trim().toLowerCase();
    const searchMatch = !trimmedSearch || 
      t.merchant.toLowerCase().includes(trimmedSearch) ||
      (t.subcategory && t.subcategory.toLowerCase().includes(trimmedSearch)) ||
      (t.notes && t.notes.toLowerCase().includes(trimmedSearch));
      
    return categoryMatch && searchMatch;
  });

  const limitedTransactions = (hideHeader || hasSearchTerm) && !showViewAll ? filteredTransactions : filteredTransactions.slice(0, 5);

  return (
    <Card>
      {!hideHeader && (
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Recent Transactions</CardTitle>
            <CardDescription>
              Here are your most recent expenses. Click to edit.
            </CardDescription>
          </div>
          {showViewAll && (
            <Button asChild variant="link">
              <Link href="/search">
                View All <ArrowRight className="ml-2" />
              </Link>
            </Button>
          )}
        </CardHeader>
      )}
      <CardContent className={`space-y-4 ${hideHeader ? 'pt-6' : ''}`}>
        {limitedTransactions.map((t: any) => (
          <div
            key={t.id}
            onClick={() => handleTransactionClick(t.id)}
            className="flex items-center justify-between p-2 rounded-lg hover:bg-neutral-900 cursor-pointer"
          >
            <div className="flex flex-col">
              <span className="font-semibold">{t.merchant}</span>
              <span className="text-sm text-muted-foreground">
                {getCategoryName(t.category)}
              </span>
            </div>
            <div className="text-right">
              <span className="font-bold text-lg">
                ${Math.abs(t.amount).toLocaleString()}
              </span>
              <p className="text-sm text-muted-foreground">
                {new Date(t.date).toLocaleDateString()}
              </p>
            </div>
          </div>
        ))}
        {limitedTransactions.length === 0 && (
          <p className="text-muted-foreground text-center">No transactions found.</p>
        )}
      </CardContent>
    </Card>
  );
}
