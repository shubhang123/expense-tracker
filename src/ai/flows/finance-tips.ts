
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A personal finance tips AI agent.
 *
 * - getFinanceTips - A function that provides personalized financial tips.
 * - FinanceTipsInput - The input type for the getFinanceTips function.
 * - FinanceTipsOutput - The return type for the getFinanceTips function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import wav from 'wav';

const FinanceTipsInputSchema = z.object({
  spendingPatterns: z
    .string()
    .describe(
      'A detailed description of the user\'s spending patterns, including categories, amounts, and frequency.'
    ),
});
export type FinanceTipsInput = z.infer<typeof FinanceTipsInputSchema>;

const FinanceTipsOutputSchema = z.object({
  tips: z
    .string()
    .describe('Personalized financial tips based on the user\'s spending patterns.'),
  audio: z.string().optional().describe('Audio data in WAV format of the tips.'),
});
export type FinanceTipsOutput = z.infer<typeof FinanceTipsOutputSchema>;

export async function getFinanceTips(
  input: FinanceTipsInput
): Promise<FinanceTipsOutput> {
  return financeTipsFlow(input);
}

const financeTipsPrompt = ai.definePrompt({
  name: 'financeTipsPrompt',
  input: {schema: FinanceTipsInputSchema},
  output: {schema: z.object({ tips: z.string().describe('Personalized financial tips based on the user\'s spending patterns.') })},
  prompt: `You are a personal finance advisor. Provide personalized financial tips based on the user's spending patterns.

Spending Patterns: {{{spendingPatterns}}}

Tips:`,
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const financeTipsFlow = ai.defineFlow(
  {
    name: 'financeTipsFlow',
    inputSchema: FinanceTipsInputSchema,
    outputSchema: FinanceTipsOutputSchema,
  },
  async input => {
    const {output} = await financeTipsPrompt(input);

    let audio = undefined;
    try {
      const { media } = await ai.generate({
        model: 'googleai/gemini-2.5-flash-preview-tts',
        config: {
          responseModalities: ['AUDIO'],
          speechConfig: {
            voiceConfig: {
              prebuiltVoiceConfig: { voiceName: 'Algenib' },
            },
          },
        },
        prompt: output?.tips ?? '',
      });
      if (!media) {
        throw new Error('no media returned');
      }
      const audioBuffer = Buffer.from(
        media.url.substring(media.url.indexOf(',') + 1),
        'base64'
      );
      audio = 'data:audio/wav;base64,' + (await toWav(audioBuffer));
    } catch (e) {
      console.error('TTS error', e);
    }

    return { tips: output!.tips, audio };
  }
);

async function toWav(
  pcmData: Buffer,
  channels = 1,
  rate = 24000,
  sampleWidth = 2
): Promise<string> {
  return new Promise((resolve, reject) => {
    const writer = new wav.Writer({
      channels,
      sampleRate: rate,
      bitDepth: sampleWidth * 8,
    });

    let bufs = [] as any[];
    writer.on('error', reject);
    writer.on('data', function (d) {
      bufs.push(d);
    });
    writer.on('end', function () {
      resolve(Buffer.concat(bufs).toString('base64'));
    });

    writer.write(pcmData);
    writer.end();
  });
}
