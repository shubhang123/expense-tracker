
// This is an autogenerated file from Firebase Studio.
'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { useLocalStorage } from '@/hooks/use-local-storage';
import { useToast } from '@/hooks/use-toast';
import { ArrowLeft, Trash2 } from 'lucide-react';
import Link from 'next/link';
import { categories as initialCategories, transactions as initialTransactions } from '@/lib/data';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { BudgetRecommender } from '@/components/dashboard/budget-recommender';

const categoryFormSchema = z.object({
  name: z.string().min(2, 'Category name is too short'),
  budget: z.coerce.number().positive('Budget must be a positive number'),
});

type CategoryFormValues = z.infer<typeof categoryFormSchema>;

export default function CategoriesPage() {
  const [categories, setCategories] = useLocalStorage('categories', initialCategories);
  const [transactions, setTransactions] = useLocalStorage('transactions', initialTransactions);
  const { toast } = useToast();

  const form = useForm<CategoryFormValues>({
    resolver: zodResolver(categoryFormSchema),
    defaultValues: {
      name: '',
      budget: 0,
    },
  });

  const onSubmit = (data: CategoryFormValues) => {
    const newCategory = {
      id: data.name.toLowerCase().replace(/\s+/g, '-'),
      name: data.name,
      budget: data.budget,
    };

    if (categories.some(c => c.id === newCategory.id)) {
      toast({
        title: 'Category Exists',
        description: 'A category with this name already exists.',
        variant: 'destructive',
      });
      return;
    }

    setCategories([...categories, newCategory]);
    toast({
      title: 'Category Added!',
      description: `The "${data.name}" category has been added.`,
    });
    form.reset();
  };
  
  const handleDeleteCategory = (id: string) => {
    // Re-assign transactions from the deleted category to 'uncategorized'
    const updatedTransactions = transactions.map((t: any) => {
      if (t.category === id) {
        return { ...t, category: 'uncategorized' };
      }
      return t;
    });
    setTransactions(updatedTransactions);

    const updatedCategories = categories.filter((c: any) => c.id !== id);
    setCategories(updatedCategories);

    toast({
      title: 'Category Deleted!',
      description: 'The category has been removed and its transactions are now uncategorized.',
      variant: 'destructive',
    });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Button asChild variant="ghost" size="icon">
          <Link href="/">
            <ArrowLeft />
          </Link>
        </Button>
        <h1 className="text-2xl font-bold">Manage Categories</h1>
      </div>

      <BudgetRecommender />

      <Card>
        <CardHeader>
          <CardTitle>Add New Category</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Category Name</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g. Shopping" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="budget"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Monthly Budget</FormLabel>
                    <FormControl>
                      <Input type="number" placeholder="0.00" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full">
                Add Category
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle>Your Categories</CardTitle>
          <CardDescription>
            Here are all your spending categories.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-2">
            {categories.map((category: any) => (
                <div key={category.id} className="flex items-center justify-between p-2 rounded-lg hover:bg-neutral-900">
                    <div>
                        <p className="font-semibold">{category.name}</p>
                        <p className="text-sm text-muted-foreground">Budget: ${category.budget.toLocaleString()}</p>
                    </div>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="ghost" size="icon" disabled={category.id === 'uncategorized'}>
                            <Trash2 className="text-destructive"/>
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                          <AlertDialogDescription>
                            This will delete the &quot;{category.name}&quot; category. Transactions will be moved to Uncategorized. This action cannot be undone.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction onClick={() => handleDeleteCategory(category.id)}>
                            Delete
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                </div>
            ))}
        </CardContent>
      </Card>

    </div>
  );
}
