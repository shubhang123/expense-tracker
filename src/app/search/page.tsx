
// This is an autogenerated file from Firebase Studio.
'use client';

import { ArrowLeft } from 'lucide-react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { useLocalStorage } from '@/hooks/use-local-storage';
import { categories as initialCategories, transactions as initialTransactions } from '@/lib/data';
import { useSearchParams } from 'next/navigation';
import React, { useState, useMemo, useEffect } from 'react';
import { Input } from '@/components/ui/input';
import { RecentTransactions } from '@/components/dashboard/recent-transactions';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { CalendarIcon } from 'lucide-react';
import { Calendar } from '@/components/ui/calendar';
import { format, subDays } from 'date-fns';
import { cn } from '@/lib/utils';
import { DateRange } from 'react-day-picker';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

type SmartFilterType = 'high-value' | 'uncategorized' | 'recent';

function SearchPageContent() {
  const searchParams = useSearchParams();
  const [transactions] = useLocalStorage('transactions', initialTransactions);
  const [categories] = useLocalStorage('categories', initialCategories);
  
  const [searchTerm, setSearchTerm] = useState(searchParams.get('q') || '');
  const [date, setDate] = useState<DateRange | undefined>(undefined);
  const [category, setCategory] = useState<string>('all');
  const [amountFilter, setAmountFilter] = useState<{min?: number, max?: number} | undefined>(undefined);
  const [activeSmartFilter, setActiveSmartFilter] = useState<SmartFilterType | null>(null);

  useEffect(() => {
    // Deselect smart filter if any manual filter is changed
    if(activeSmartFilter) {
        setActiveSmartFilter(null);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchTerm, date, category, amountFilter]);

  const filteredTransactions = useMemo(() => {
    return transactions.filter((t: any) => {
      const trimmedSearch = searchTerm.trim().toLowerCase();
      const searchMatch = !trimmedSearch ||
        t.merchant.toLowerCase().includes(trimmedSearch) ||
        (t.subcategory && t.subcategory.toLowerCase().includes(trimmedSearch)) ||
        (t.notes && t.notes.toLowerCase().includes(trimmedSearch));

      const categoryMatch = category === 'all' || t.category === category;
      
      const dateMatch = !date || (
        (!date.from || new Date(t.date) >= date.from) &&
        (!date.to || new Date(t.date) <= date.to)
      )

      const amountMatch = !amountFilter || (
        (!amountFilter.min || Math.abs(t.amount) >= amountFilter.min) &&
        (!amountFilter.max || Math.abs(t.amount) <= amountFilter.max)
      )

      return searchMatch && categoryMatch && dateMatch && amountMatch;
    });
  }, [searchTerm, category, date, transactions, amountFilter]);
  
  const applySmartFilter = (type: SmartFilterType) => {
    setActiveSmartFilter(type);
    setSearchTerm('');
    if (type === 'high-value') {
        setAmountFilter({ min: 100 });
        setCategory('all');
        setDate(undefined);
    } else if (type === 'uncategorized') {
        setCategory('uncategorized');
        setAmountFilter(undefined);
        setDate(undefined);
    } else if (type === 'recent') {
        setDate({ from: subDays(new Date(), 7), to: new Date() });
        setAmountFilter(undefined);
        setCategory('all');
    }
  }

  const clearFilters = () => {
    setSearchTerm('');
    setDate(undefined);
    setCategory('all');
    setAmountFilter(undefined);
    setActiveSmartFilter(null);
  }
  
  const hasActiveFilters = searchTerm || date || category !== 'all' || amountFilter || activeSmartFilter;

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Button asChild variant="ghost" size="icon">
          <Link href="/">
            <ArrowLeft />
          </Link>
        </Button>
        <h1 className="text-2xl font-bold">Advanced Search</h1>
      </div>
      
      <Card>
        <CardHeader>
            <CardTitle>Filters</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
            <Input 
                placeholder="Search transactions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="text-base"
            />
            
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={'outline'}
                        className={cn(
                          'justify-start text-left font-normal',
                          !date && 'text-muted-foreground'
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {date?.from ? (
                          date.to ? (
                            <>
                              {format(date.from, 'LLL dd, y')} -{' '}
                              {format(date.to, 'LLL dd, y')}
                            </>
                          ) : (
                            format(date.from, 'LLL dd, y')
                          )
                        ) : (
                          <span>Pick a date range</span>
                        )}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        initialFocus
                        mode="range"
                        defaultMonth={date?.from}
                        selected={date}
                        onSelect={setDate}
                        numberOfMonths={2}
                      />
                    </PopoverContent>
                </Popover>

                <Select value={category} onValueChange={setCategory}>
                    <SelectTrigger>
                        <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="all">All Categories</SelectItem>
                        {categories.map((cat: any) => (
                            <SelectItem key={cat.id} value={cat.id}>
                                {cat.name}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
            </div>

            <div>
                <h3 className="mb-2 text-sm font-medium text-muted-foreground">Smart Filters</h3>
                <div className="flex flex-wrap gap-2">
                    <Button variant={activeSmartFilter === 'high-value' ? 'secondary' : 'outline'} size="sm" onClick={() => applySmartFilter('high-value')}>High-Value (>$100)</Button>
                    <Button variant={activeSmartFilter === 'uncategorized' ? 'secondary' : 'outline'} size="sm" onClick={() => applySmartFilter('uncategorized')}>Uncategorized</Button>
                    <Button variant={activeSmartFilter === 'recent' ? 'secondary' : 'outline'} size="sm" onClick={() => applySmartFilter('recent')}>Last 7 Days</Button>
                </div>
            </div>

            {hasActiveFilters && (
                <Button variant="link" onClick={clearFilters} className="p-0 h-auto">Clear all filters</Button>
            )}
            
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
            <CardTitle>Results ({filteredTransactions.length})</CardTitle>
        </CardHeader>
        <CardContent>
            <RecentTransactions transactions={filteredTransactions} categories={categories} hideHeader={true}/>
        </CardContent>
      </Card>

    </div>
  );
}

export default function SearchPage() {
    return (
      <React.Suspense fallback={<div>Loading...</div>}>
        <SearchPageContent />
      </React.Suspense>
    )
}
