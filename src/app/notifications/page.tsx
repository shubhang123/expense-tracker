// This is an autogenerated file from Firebase Studio.
'use client';

import { ArrowLeft, Megaphone, TrendingUp, AlertTriangle } from 'lucide-react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useLocalStorage } from '@/hooks/use-local-storage';
import { categories as initialCategories, transactions as initialTransactions } from '@/lib/data';
import type { Transaction, Category } from '@/lib/types';

const LARGE_PURCHASE_THRESHOLD = 200;
const BUDGET_ALERT_THRESHOLD = 0.8; // 80%

type Alert = {
  id: string;
  type: 'budget' | 'large_purchase';
  title: string;
  description: string;
  timestamp: Date;
  cta?: {
    text: string;
    href: string;
  };
};

export default function NotificationsPage() {
    const [transactions] = useLocalStorage<Transaction[]>('transactions', initialTransactions);
    const [categories] = useLocalStorage<Category[]>('categories', initialCategories);

    const spendingData = categories.map(category => {
        const categoryTransactions = transactions.filter(t => t.category.toLowerCase() === category.id.toLowerCase());
        const spent = categoryTransactions.reduce((acc, t) => acc + Math.abs(t.amount), 0);
        return {
          ...category,
          spent,
          total: category.budget,
          progress: category.budget > 0 ? (spent / category.budget) : 0,
        };
    });

    const budgetAlerts: Alert[] = spendingData
        .filter(cat => cat.budget > 0 && cat.progress > BUDGET_ALERT_THRESHOLD)
        .map(cat => ({
            id: `budget-${cat.id}`,
            type: 'budget',
            title: `Nearing budget for ${cat.name}`,
            description: `You've spent ₹${cat.spent.toLocaleString()} of your ₹${cat.total.toLocaleString()} budget (${Math.round(cat.progress * 100)}%).`,
            timestamp: new Date(),
            cta: {
                text: 'Manage Budgets',
                href: '/categories'
            }
        }));
    
    const largePurchaseAlerts: Alert[] = transactions
        .filter(t => Math.abs(t.amount) > LARGE_PURCHASE_THRESHOLD)
        .map(t => ({
            id: `large-${t.id}`,
            type: 'large_purchase',
            title: `Large Purchase: ₹${Math.abs(t.amount).toLocaleString()}`,
            description: `A transaction of ₹${Math.abs(t.amount).toLocaleString()} was made at ${t.merchant}.`,
            timestamp: new Date(t.date),
            cta: {
                text: 'View Transaction',
                href: `/edit/${t.id}`
            }
        }))

    const allAlerts = [...budgetAlerts, ...largePurchaseAlerts].sort((a,b) => b.timestamp.getTime() - a.timestamp.getTime());

    const getIcon = (type: Alert['type']) => {
        switch(type) {
            case 'budget': return <TrendingUp className="h-6 w-6 text-yellow-500" />;
            case 'large_purchase': return <AlertTriangle className="h-6 w-6 text-red-500" />;
            default: return <Megaphone className="h-6 w-6 text-primary" />;
        }
    }

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Button asChild variant="ghost" size="icon">
          <Link href="/">
            <ArrowLeft />
          </Link>
        </Button>
        <h1 className="text-2xl font-bold">Notifications</h1>
      </div>
      
      {allAlerts.length > 0 ? (
        <div className="space-y-4">
            {allAlerts.map(alert => (
                <Card key={alert.id} className="bg-neutral-900">
                    <CardHeader className="flex flex-row items-center gap-4 space-y-0 pb-4">
                        {getIcon(alert.type)}
                        <CardTitle className="text-lg">{alert.title}</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="text-muted-foreground">{alert.description}</p>
                        {alert.cta && (
                            <Button asChild variant="link" className="p-0 mt-2 h-auto">
                                <Link href={alert.cta.href}>{alert.cta.text}</Link>
                            </Button>
                        )}
                    </CardContent>
                </Card>
            ))}
        </div>
      ) : (
        <div className="text-center text-muted-foreground pt-12">
            <Megaphone className="h-12 w-12 mx-auto mb-4" />
            <p className="font-semibold text-lg">All clear!</p>
            <p>You have no new notifications.</p>
        </div>
      )}
    </div>
  );
}
