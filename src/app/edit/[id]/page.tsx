// This is an autogenerated file from Firebase Studio.
'use client';

import { ArrowLeft, Trash2 } from 'lucide-react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { AddTransactionForm } from '@/components/forms/add-transaction-form';
import { categories as initialCategories, transactions as initialTransactions } from '@/lib/data';
import { useLocalStorage } from '@/hooks/use-local-storage';
import { useParams, useRouter } from 'next/navigation';
import { useToast } from '@/hooks/use-toast';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import Image from 'next/image';

export default function EditTransactionPage() {
  const [transactions, setTransactions] = useLocalStorage(
    'transactions',
    initialTransactions
  );
  const [categories] = useLocalStorage('categories', initialCategories);
  const router = useRouter();
  const params = useParams();
  const { toast } = useToast();
  const id = Array.isArray(params.id) ? params.id[0] : params.id;

  const transaction = transactions.find((t: any) => t.id === id);

  const handleEditTransaction = (data: any) => {
    const updatedTransactions = transactions.map((t: any) =>
      t.id === id ? { ...t, ...data, date: new Date(data.date).toISOString() } : t
    );
    setTransactions(updatedTransactions);
    toast({
      title: 'Transaction Updated!',
      description: 'Your transaction has been successfully updated.',
    });
    router.push('/');
  };

  const handleDeleteTransaction = () => {
    const updatedTransactions = transactions.filter((t: any) => t.id !== id);
    setTransactions(updatedTransactions);
    toast({
      title: 'Transaction Deleted!',
      description: 'Your transaction has been removed.',
      variant: 'destructive',
    });
    router.push('/');
  };

  if (!transaction) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4">
          <Button asChild variant="ghost" size="icon">
            <Link href="/">
              <ArrowLeft />
            </Link>
          </Button>
          <h1 className="text-2xl font-bold">Transaction Not Found</h1>
        </div>
        <p>The transaction you are looking for does not exist.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button asChild variant="ghost" size="icon">
            <Link href="/">
              <ArrowLeft />
            </Link>
          </Button>
          <h1 className="text-2xl font-bold">Edit Transaction</h1>
        </div>
        <AlertDialog>
          <AlertDialogTrigger asChild>
            <Button variant="destructive" size="icon">
              <Trash2 />
            </Button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
              <AlertDialogDescription>
                This action cannot be undone. This will permanently delete this transaction.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={handleDeleteTransaction}>
                Delete
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>

      {transaction.receiptUrl && (
        <div className="mt-6">
            <h3 className="text-lg font-semibold mb-2">Receipt</h3>
            <div className="relative aspect-video w-full rounded-lg overflow-hidden border">
                <Image src={transaction.receiptUrl} alt="Receipt" layout="fill" objectFit="contain" />
            </div>
        </div>
      )}

      <AddTransactionForm
        categories={categories}
        onSubmit={handleEditTransaction}
        initialData={transaction}
        isEditMode={true}
      />
    </div>
  );
}
